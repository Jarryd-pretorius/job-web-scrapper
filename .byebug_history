q
continue
q
continue
q
price = fullSearch_parse_page.css[0]
price = fullSearch_parse_page.css("tr").css("td").text.split
q
price = fullSearch_parse_page.css("tr").css("td").text.split
price = fullSearch_parse_page.css("tr").css("td[class]").text.split
price = fullSearch_parse_page.css("tr").css("td[class]").text.split[1].gsub(/[Beds]/,"")
q
price = fullSearch_parse_page.css("tr").css("td[class]").text.split[2].gsub(/[Beds]/,"").gsub(/4([\s\S]*)$/, "")
price = fullSearch_parse_page.css("tr").css("td[class]").text.split[2].gsub(/[Beds]/,"").gsub(/5([\s\S]*)$/, "")
price = fullSearch_parse_page.css("tr").css("td[class]").text.split[2].gsub(/[Beds]/,"")
price = fullSearch_parse_page.css("tr").css("td[class]").text.split[1].gsub(/[Beds]/,"")
price = fullSearch_parse_page.css("tr").css("td[class]").text.split[2].gsub(/[Beds]/, ")
price = fullSearch_parse_page.css("tr").css("td[class]").text.split[2].gsub(/[Beds]/,")
price = fullSearch_parse_page.css("tr").css("td[class]").text.split[2].gsub(/[Beds]/,"
price = fullSearch_parse_page.css("tr").css("td[class]").text.split.count
price = fullSearch_parse_page.css("tr").css("td[class]").text.split[1]
price = fullSearch_parse_page.css("tr").css("td[class]").text.split[2].gsub(/[Beds]/,"").gsub(/4([\s\S]*)$/, "").gsub(/[Beds]/,"").gsub(/5([\s\S]*
price = fullSearch_parse_page.css("tr").css("td[class]").text.split[1].gsub(/[Beds]/,"").gsub(/4([\s\S]*)$/, "")
price = fullSearch_parse_page.css("tr").css("td[class]").text.split[2]
price = fullSearch_parse_page.css("tr").css("td[class]").text.split[1]
price = fullSearch_parse_page.css("tr").css("td[class]").text.split
price = fullSearch_parse_page.css("tr").css("td[class]").text.split[1].gsub(/[Beds]/,"").gsub(/5([\s\S]*)$/, "")
price = fullSearch_parse_page.css("tr").css("td[class]").text.split[2].gsub(/[Beds]/,"").gsub(/5([\s\S]*)$/, "")
q
price = fullSearch_parse_page.css("tr").css("td[class]").text.split[3].gsub(/[Beds]/,"").gsub(/5([\s\S]*)$/, "")
price = fullSearch_parse_page.css("tr").css("td[class]").text.split[3].gsub(/[Beds]/,"").gsub((.+), "")
price = fullSearch_parse_page.css("tr").css("td[class]").text.split[3].gsub(/[Beds]/,"").gsub(/k([\s\S]*)$/, "")
price = fullSearch_parse_page.css("tr").css("td[class]").text.split[3].gsub(/[Beds]/,"")
price = fullSearch_parse_page.css("tr").css("td[class]").text.split[3].gsub("Beds")
price = fullSearch_parse_page.css("tr").css("td[class]").text.split[3].gsub("Beds", )
price = fullSearch_parse_page.css("tr").css("td[class]").text.split[3].gsub("Beds, )
price = fullSearch_parse_page.css("tr").css("td[class]").text.split[3].gsub(/Beds/)
price = fullSearch_parse_page.css("tr").css("td[class]").text.split[3]
price = fullSearch_parse_page.css("tr").css("td[class]").text.split
price = fullSearch_parse_page.css("tr").css("td[class]").text
price = fullSearch_parse_page.css("tr").css("td[class]").text.split
price = fullSearch_parse_page.css("tr").css("td").text.split
price = fullSearch_parse_page.css("tr").css("td").text
price = fullSearch_parse_page.css("div[data-testid='side-bar']").css("td").text
price = fullSearch_parse_page.css("div[data-testid='side-bar']").css("td")
price = fullSearch_parse_page.css("div[data-testid='side-bar']").text
price = fullSearch_parse_page.css("a[href='/sale/woodvale-wa-6026/house/3-bedrooms/']").text
price = fullSearch_parse_page.css("a[href='/sale/woodvale-wa-6026/house/3-bedrooms/']")
q
continue
house[:price]
q
house[:price]
house[:beds]
jobs[:beds]
full_houseListings.count
house[:price]
q
house[:price]
job[:price]
q
last_page
per_page
q
numberListings.split[0]
numberListings.split
numberListings
q
job[:price]
q
job[:baths]
job[:beds]
q
job[:beds].text
job[:beds]
q
job[:beds].css("#text")
job[:beds].css("span#text")
job[:beds].split[0]
job[:beds].split[1]
job[:beds].split[2].split
job[:beds].split[2]
job[:beds].split[3]
job[:beds].split[9]
job[:beds].split[0]
job[:beds].split
job[:beds]
q
job[:beds]
job[:beds].children
job[:beds].childern
job[:beds].first.text
job[:beds].first
job[:beds].inner
job[:beds].value
job[:beds]
q
job[:beds]
q
job[:beds]
q
job[:beds].text
job[:beds]
q
job[:beds]
q
job[:address2]
job[:address1]
job[:addres1]
job[:beds]
q
job[:beds].text
job[:beds]
q
beds = parse_page.css("div[data-testid='property-features-wrapper']").css("span")
beds.text
clear
beds.text
beds = parse_page.css("div[data-testid='property-features-wrapper']").css("span")
beds.text
beds.first
beds = parse_page.css("div[data-testid='property-features-wrapper']")
beds
beds.first
beds = parse_page.css("div[data-testid='property-features-wrapper']").text
beds.text
beds.first.text
beds.first
beds = parse_page.css("div[data-testid='property-features-wrapper']")
job[:address1].text
job[:address2].text
continue
job[:address2].text
job[:address1].text
continue
job[:address1].text
job[:address2].text
q
job[:address2].text
job[:address1].text
q
job[:address1].text
job[:address].text
continue
job[:address].text
job[:address]
q
job[:address]
job[:address].text
q
job[:address].text
continue
job[:address].text
q
job[:address].text
job[:address]
q
job[address]
q
house = parse_page.css("span[data-testid='address-line1']")
q
housey
q
houseCard.text
houseCard.count
houseCard = parse_page.css("ul[data-testid='results']").css("meta[itemprop='name']")
houseCard = parse_page.css("ul[data-testid='results']").css("meta['itemprop='name']")
houseCard = parse_page.css("ul[data-testid='results']").css(meta['itemprop='name']")
houseCard.count
houseCard = parse_page.css("ul[data-testid='results']").css("li").css("span")
houseCard = parse_page.css("ul[data-testid='results']").CSS("li").css("span")
houseCard = parse_page.css("ul[data-testid='results']").css("div[data-testid='listing']")
houseCard.count
houseCard = parse_page.css("ul[data-testid='results']").css("div[data-testid='listing-card-wrapper-elitepp']")
houseCard.count
houseCard = parse_page.css("ul[data-testid='results']").css("li")
houseCard = parse_page.css("ul[data-testid='results']").CSS("li")
houseCard.count
houseCard = parse_page.css("ul[data-testid='results']")
houseCard.count
houseCard = parse_page.css("div[data-testid='listing-card-wrapper-standard']")
houseCard = parsed_page.css("div[data-testid='listing-card-wrapper-standard']")
houseCard = parsed_page.css("div[data-testid="listing-card-wrapper-standard"]")
house.text
house = parse_page.css("span[data-testid='address-line1']")
q
house.count
house.text
house = parse_page.css("span[data-testid='address-line1']")
q
house.text
house.count
house = parse_page.css("span[data-testid='address-line1']")
house = parse_page.css(span[data-testid="address-line1"])
house = parse_page.attribute("href")
house = parse_page.attribute("data-testid")
house = parse_page.attribute("data.testid")
house = parse_page.attribute("data.testid").value
house = parse_page.attribute("listing-card-price-wrapper").value
house = parse_page.attribute("listing-card-price-wrapper")
house = parse_page.css("listing-card-price-wrapper")
house = parse_page.css("#listing-card-price-wrapper")
house = parse_page.css("div#listing-card-price-wrapper")
house = parse_page.css("div.listing-card-price-wrapper")
house.first.text
house.first
house = parse_page.css("li")
q
car = parse_page.css("h1.model__title")
q
models.countq
q
models.count
q
models.text
q
models.text
q
cars = parse_page.css("ul.cg-model-list-all").css("li").css("a"
cars.first.text
cars.first
cars = parse_page.css("ul.cg-model-list-all").css("li").css("a")
cars.first
cars 
cars = parse_page.css("ul.cg-model-list-all").css("li").css("a").text
cars.first
cars = parse_page.css("ul.cg-model-list-all").css("li").css("a")
cars.first
cars.count
cars = parse_page.css("ul.cg-model-list-all").css("li")
cars.count
cras.count
cars = parse_page.css("ul.cg-model-list-all")
cars = parse_page("li")
cars = parse_page("ul.cg-model-list-all")
q
cars = parse_page("ul.cg-model-list-all")
q
cars = parse_page("ul.cg-model-list-all")
q
cars.count
cars =  parse_page.css("#all-tab-content")
cars.count
cars =  parse_page.css("div.search-results-page ng-scope")
cars =  parse_page.css("search-results-page ng-scope")
cars =  parse_page.css("init")
cars =  parse_page.css("div.init")
cars.first
cars.count
cars =  parse_page.css("h5.carListing--textHeading")
q
cars = parse_page.css("div.card-body")
cars = parsed_page.css("div.card-body")
doc
q
companyCards = parse_page.css("table").css("tbor")
